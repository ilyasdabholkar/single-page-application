{"ast":null,"code":"import * as ActionTypes from './ActionTypes'; //Reducer function which takes 2 parameters previous state and action\n//action.payload contains the information regarding dishes \n//if dishes failed then action.payload will be containing an error message\n\nexport const Dishes = (state = {\n  isLoading: true,\n  errMess: null,\n  dishes: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_DISHES:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        dishes: action.payload\n      };\n\n    case ActionTypes.DISHES_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        dishes: []\n      };\n\n    case ActionTypes.DISHES_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload,\n        dishes: []\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Dishes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dishes\");","map":{"version":3,"sources":["D:/single-page-application/src/redux/dishes.js"],"names":["ActionTypes","Dishes","state","isLoading","errMess","dishes","action","type","ADD_DISHES","payload","DISHES_LOADING","DISHES_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAG;AAC3BC,EAAAA,SAAS,EAAE,IADgB;AAE3BC,EAAAA,OAAO,EAAE,IAFkB;AAG3BC,EAAAA,MAAM,EAAC;AAHoB,CAAT,EAIfC,MAJe,KAIJ;AACd,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,UAAjB;AACI,aAAO,EAAC,GAAGN,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CC,QAAAA,MAAM,EAAEC,MAAM,CAACG;AAA3D,OAAP;;AAEJ,SAAKT,WAAW,CAACU,cAAjB;AACI,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,SAAS,EAAE,IAAtB;AAA4BC,QAAAA,OAAO,EAAE,IAArC;AAA2CC,QAAAA,MAAM,EAAC;AAAlD,OAAP;;AAEJ,SAAKL,WAAW,CAACW,aAAjB;AACI,aAAO,EAAC,GAAGT,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAEE,MAAM,CAACG,OAA7C;AAAsDJ,QAAAA,MAAM,EAAC;AAA7D,OAAP;;AAEJ;AACI,aAAOH,KAAP;AAXR;AAaH,CAlBM;KAAMD,M","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\n\r\n//Reducer function which takes 2 parameters previous state and action\r\n//action.payload contains the information regarding dishes \r\n//if dishes failed then action.payload will be containing an error message\r\nexport const Dishes = (state = { \r\n    isLoading: true,\r\n    errMess: null,\r\n    dishes:[]\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_DISHES:\r\n            return {...state, isLoading: false, errMess: null, dishes: action.payload};\r\n\r\n        case ActionTypes.DISHES_LOADING:\r\n            return {...state, isLoading: true, errMess: null, dishes:[]}\r\n\r\n        case ActionTypes.DISHES_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload, dishes:[]};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}