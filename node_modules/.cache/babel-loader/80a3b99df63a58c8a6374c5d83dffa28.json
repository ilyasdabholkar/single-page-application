{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl'; //Action addComment which will be used to take form input and add that data to existing data.\n\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dish: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n}; //fetch dishes is a thunk which returns a function which when called sets isLoading to true and tries to fetch the dishes\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n}); //COMMENTS\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //PROMOTIONS\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n}); //LEADERS\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = promos => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: promos\n});","map":{"version":3,"sources":["D:/React/single-page-application/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","dish","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n//Action addComment which will be used to take form input and add that data to existing data.\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dish : dishId,\r\n        rating : rating,\r\n        author : author,\r\n        comment : comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        } else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    },\r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); \r\n    alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\n//fetch dishes is a thunk which returns a function which when called sets isLoading to true and tries to fetch the dishes\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\n//COMMENTS\r\nexport const fetchComments = () => (dispatch) => {\r\n\r\n    return fetch(baseUrl + 'comments')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n}\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\n//PROMOTIONS\r\nexport const fetchPromos = () => (dispatch) => {\r\n\r\n    dispatch(promosLoading(true));\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n//LEADERS\r\nexport const fetchLeaders = () => (dispatch) => {\r\n\r\n    dispatch(leadersLoading(true));\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (promos) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: promos\r\n});\r\n"]},"metadata":{},"sourceType":"module"}