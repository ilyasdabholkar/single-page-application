{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted');\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n}); //thunk (returns a function)\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n}); //LEADERS \n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n}); //FEEDBACK POST\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => alert(\"Current State is: \" + JSON.stringify(response))).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be posted');\n  });\n};","map":{"version":3,"sources":["D:/single-page-application/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","postComment","dishId","rating","author","comment","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","addComment","catch","console","log","message","alert","type","ADD_COMMENT","payload","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","firstname","lastname","telnum","email","agree","contactType","newFeedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n  const newComment = {\r\n    dishId: dishId,\r\n    rating: rating,\r\n    author: author,\r\n    comment: comment,\r\n  };\r\n  newComment.date = new Date().toISOString();\r\n  return fetch(baseUrl + 'comments', {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newComment),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    credentials: \"same-origin\"\r\n  })\r\n  .then(response => {\r\n    if(response.ok) {\r\n      return response;\r\n    } else {\r\n       var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n       error.response = response;\r\n       throw error;\r\n    }\r\n  },\r\n    error => {\r\n      throw error;\r\n  })\r\n  .then(response => response.json())\r\n  .then(response => dispatch(addComment(response)))\r\n  .catch(error => {console.log('post comments', error.message); alert('Your comment could not be posted');});\r\n};\r\n\r\nexport const addComment = (comment) =>({\r\n  type: ActionTypes.ADD_COMMENT,\r\n  payload: comment\r\n});\r\n\r\n//thunk (returns a function)\r\nexport const fetchDishes = () => (dispatch) => {\r\n  dispatch(dishesLoading(true));\r\n\r\n  return fetch(baseUrl + 'dishes')\r\n         .then(response => {\r\n           if(response.ok) {\r\n             return response;\r\n           } else {\r\n              var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n              error.response = response;\r\n              throw error;\r\n           }\r\n         },\r\n           error => {\r\n             var errmess = new Error(error.message);\r\n             throw errmess;\r\n         })\r\n         .then(response => response.json())\r\n         .then(dishes => dispatch(addDishes(dishes)))\r\n         .catch(error => dispatch(dishesFailed(error.message)));\r\n};\r\n\r\nexport const dishesLoading = () =>({\r\n  type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n  type: ActionTypes.DISHES_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n  type: ActionTypes.ADD_DISHES,\r\n  payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n  return fetch(baseUrl + 'comments')\r\n          .then(response => {\r\n            if(response.ok) {\r\n              return response;\r\n            } else {\r\n               var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n               error.response = response;\r\n               throw error;\r\n            }\r\n          },\r\n          error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n          })\r\n         .then(response => response.json())\r\n         .then(comments => dispatch(addComments(comments)))\r\n         .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\nexport const commentsFailed = (errmess) => ({\r\n  type: ActionTypes.COMMENTS_FAILED,\r\n  payload: errmess\r\n});\r\nexport const addComments = (comments) => ({\r\n  type: ActionTypes.ADD_COMMENTS,\r\n  payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n  dispatch(promosLoading(true));\r\n\r\n  return fetch(baseUrl + 'promotions')\r\n          .then(response => {\r\n            if(response.ok) {\r\n              return response;\r\n            } else {\r\n               var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n               error.response = response;\r\n               throw error;\r\n            }\r\n           },\r\n            error => {\r\n              var errmess = new Error(error.message);\r\n              throw errmess;\r\n          })\r\n         .then(response => response.json())\r\n         .then(promos => dispatch(addPromos(promos)))\r\n         .catch(error => dispatch(promosFailed(error.message)));\r\n};\r\n\r\nexport const promosLoading = () =>({\r\n  type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n  type: ActionTypes.PROMOS_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n  type: ActionTypes.ADD_PROMOS,\r\n  payload: promos\r\n});\r\n\r\n//LEADERS \r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n  dispatch(leadersLoading(true));\r\n\r\n  return fetch(baseUrl + 'leaders')\r\n         .then(response => {\r\n           if(response.ok) {\r\n             return response;\r\n           } else {\r\n              var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n              error.response = response;\r\n              throw error;\r\n           }\r\n         },\r\n           error => {\r\n             var errmess = new Error(error.message);\r\n             throw errmess;\r\n         })\r\n         .then(response => response.json())\r\n         .then(leaders => dispatch(addLeaders(leaders)))\r\n         .catch(error => dispatch(leadersFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () =>({\r\n  type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.LEADERS_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders\r\n});\r\n\r\n\r\n\r\n//FEEDBACK POST\r\n\r\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\r\n  const newFeedback = {\r\n    firstname: firstname,\r\n    lastname: lastname,\r\n    telnum: telnum,\r\n    email: email,\r\n    agree: agree,\r\n    contactType: contactType,\r\n    message: message\r\n  };\r\n  newFeedback.date = new Date().toISOString();\r\n  return fetch(baseUrl + 'feedback', {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newFeedback),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    credentials: \"same-origin\"\r\n  })\r\n  .then(response => {\r\n    if(response.ok) {\r\n      return response;\r\n    } else {\r\n       var error = new Error('Error ' + response.status + ':' + response.statusText);\r\n       error.response = response;\r\n       throw error;\r\n    }\r\n  },\r\n    error => {\r\n      throw error;\r\n  })\r\n  .then(response => response.json())\r\n  .then(response => alert(\"Current State is: \" + JSON.stringify(response)))\r\n  .catch(error => {console.log('post feedback', error.message); alert('Your feedback could not be posted');});\r\n};"]},"metadata":{},"sourceType":"module"}