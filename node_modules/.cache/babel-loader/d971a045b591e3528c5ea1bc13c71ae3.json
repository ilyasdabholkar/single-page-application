{"ast":null,"code":"import { LEADERS } from '../shared/leaders'; //Reducer function which takes 2 parameters previous state and action\n\nexport const Leaders = (state = {\n  isLoading: true,\n  errMess: null,\n  leaders: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_LEADERS:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        leaders: action.payload\n      };\n\n    case ActionTypes.LEADERS_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        leaders: []\n      };\n\n    case ActionTypes.LEADERS_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload,\n        leaders: []\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Leaders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaders\");","map":{"version":3,"sources":["D:/React/single-page-application/src/redux/leaders.js"],"names":["LEADERS","Leaders","state","isLoading","errMess","leaders","action","type","ActionTypes","ADD_LEADERS","payload","LEADERS_LOADING","LEADERS_FAILED"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG;AAC5BC,EAAAA,SAAS,EAAE,IADiB;AAE5BC,EAAAA,OAAO,EAAE,IAFmB;AAG5BC,EAAAA,OAAO,EAAG;AAHkB,CAAT,EAGJC,MAHI,KAGO;AAC1B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,WAAW,CAACC,WAAjB;AACI,aAAO,EAAE,GAAGP,KAAL;AAAYC,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAE,IAAvC;AAA6CC,QAAAA,OAAO,EAAEC,MAAM,CAACI;AAA7D,OAAP;;AAEJ,SAAKF,WAAW,CAACG,eAAjB;AACI,aAAO,EAAE,GAAGT,KAAL;AAAYC,QAAAA,SAAS,EAAE,IAAvB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CC,QAAAA,OAAO,EAAE;AAArD,OAAP;;AAEJ,SAAKG,WAAW,CAACI,cAAjB;AACI,aAAO,EAAE,GAAGV,KAAL;AAAYC,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAEE,MAAM,CAACI,OAA9C;AAAuDL,QAAAA,OAAO,EAAE;AAAhE,OAAP;;AAEJ;AACI,aAAOH,KAAP;AAXR;AAaH,CAjBM;KAAMD,O","sourcesContent":["import { LEADERS } from '../shared/leaders';\r\n\r\n//Reducer function which takes 2 parameters previous state and action\r\nexport const Leaders = (state = { \r\n    isLoading: true,\r\n    errMess: null,\r\n    leaders : []}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_LEADERS:\r\n            return { ...state, isLoading: false, errMess: null, leaders: action.payload };\r\n\r\n        case ActionTypes.LEADERS_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, leaders: [] }\r\n\r\n        case ActionTypes.LEADERS_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload, leaders: [] };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}