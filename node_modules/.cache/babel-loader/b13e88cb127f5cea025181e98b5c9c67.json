{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport baseUrl from '../shared/baseUrl'; //Action addComment which will be used to take form input and add that data to existing data.\n\nexport const addComment = (dishId, rating, author, comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  }\n}); //fetch dishes is a thunk which returns a function which when called sets isLoading to true and tries to fetch the dishes\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => response.json()).then(dishes => dispatch(addDishes(dishes)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n}); //COMMENTS\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => response.json()).then(comments => dispatch(addComments(comments)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //PROMOTIONS\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => response.json()).then(promos => dispatch(addPromos(promos)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["D:/React/single-page-application/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","fetchDishes","dispatch","dishesLoading","fetch","then","response","json","dishes","addDishes","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","PROMOS_LOADING","promosFailed","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport baseUrl from '../shared/baseUrl';\r\n\r\n//Action addComment which will be used to take form input and add that data to existing data.\r\nexport const addComment = (dishId, rating, author, comment) => ({\r\n    type : ActionTypes.ADD_COMMENT,\r\n    payload : {\r\n        dishId : dishId,\r\n        rating : rating,\r\n        author : author,\r\n        comment : comment\r\n    }\r\n});\r\n\r\n//fetch dishes is a thunk which returns a function which when called sets isLoading to true and tries to fetch the dishes\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n   return fetch(baseUrl + 'dishes')\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\n//COMMENTS\r\nexport const fetchComments = () => (dispatch) => {\r\n\r\n   return fetch(baseUrl + 'comments')\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)));\r\n}\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\n//PROMOTIONS\r\nexport const fetchPromos = () => (dispatch) => {\r\n\r\n    dispatch(promosLoading(true));\r\n\r\n   return fetch(baseUrl + 'promotions')\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n"]},"metadata":{},"sourceType":"module"}